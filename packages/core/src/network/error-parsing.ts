import {messageStore} from "../stores/message";

export interface ProblemDetail {
    /**
     * @description A URI reference [RFC3986] that identifies the problem type.
     * This specification encourages that, when dereferenced, it provide human-readable documentation
     *  for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).
     *  When this member is not present, its value is assumed to be "type" (string) - "about:blank".
     */
    type?: string | "about:blank";

    /**
     * @description (number) - The HTTP status code ([RFC7231], Section 6)
     * generated by the origin server for this occurrence of the problem.
     */
    status: number;

    /**
     * @description A short, human-readable summary of the problem
     *  type.  It SHOULD NOT change from occurrence to occurrence of the
     *  problem, except for purposes of localization (e.g., using
     *  proactive content negotiation; see [RFC7231], Section 3.4).
     */
    title?: string;

    /**
     * @description A human-readable explanation specific to
     * this occurrence of the problem.
     */
    detail?: string;

    /**
     * @description A URI reference that identifies the specific occurrence of the problem.
     * It may or may not yield further information if dereferenced.
     */
    instance?: string;

    /**
     * @description Problem type definitions MAY extend the problem details object with additional members.
     */
    [key: string]: any;
}

/** Format attendu des erreurs JSON issues du serveur. */
export interface ErrorResponse extends ProblemDetail {}

/** Erreur JSON issue du serveur, à laquelle on a ajouté des infos issues du parsing. */
export interface ManagedErrorResponse extends ErrorResponse {
    /** Erreurs détectées dans l'erreur serveur. */
    $parsedErrors: {
        /** Erreurs globales. */
        globals: string[];
    };
    /** Statut HTTP de la réponse. */
    $status: number;
}

/**
 * Parse une réponse du serveur pour enregistrer les erreurs.
 * @param $status Statut HTTP de la réponse.
 * @param response Corps de la réponse.
 */
export function manageResponseErrors($status: number, response: ErrorResponse): ManagedErrorResponse {
    return {
        ...response,
        $status,
        $parsedErrors: {
            globals: messageStore.addMessages(response)
        }
    };
}

/**
 * Parse une réponse du serveur pour enregistrer les erreurs.
 * @param $status Statut HTTP de la réponse.
 * @param response Corps de la réponse.
 */
export function manageProblemDetail(response: ProblemDetail): ManagedErrorResponse {
    return {
        ...response,
        $status: response.status,
        $parsedErrors: {
            globals: messageStore.addMessages(response)
        }
    };
}
